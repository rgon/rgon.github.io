---
title: Lighting Gallery
permalink: /gallery/
description: A showcase of my lighting design works, from designs to renders and live show operation.
---
<!DOCTYPE html>
<html lang="en">
<head>
    {% include "components/head" %}
    <link rel="stylesheet" type="text/css" href="/css/articlelist.css" />
<style>
section {
    position: relative;
}
.galleryCollage {
    --collage-height: 400px;
    display: grid;
    grid-auto-flow: dense;
    grid-auto-rows: calc(var(--collage-height) *1);
    grid-template-columns: repeat( auto-fit, minmax(250px, 1fr) );
    /*grid-template-columns: repeat(2, 2fr);*/
    box-sizing: border-box;
    height: var(--collage-height);
    
    grid-gap: 2em;

    /* So it can be centered when there aren't enough items */
    width: 100%;
    height: auto;
}
.galleryCollage .item {
    box-sizing: border-box;
    position: relative;
    background-color: var(--bg-color);
    overflow: hidden;
}
.galleryCollage .item img {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;

    z-index: 4;
    opacity: 1;
    transition: .3s opacity;
    pointer-events: none;
}

/* Description reveal on hover */
.galleryCollage .item .description {
    opacity: 1;
    z-index: 1;
    transition: .3s opacity;
    top: 50%;
    transform: translateY(-50%);
    left:0;
    right: 0;
    margin: auto;
    position: absolute;
    display: block;
    text-align: center;
    padding: 0 2em;
    box-sizing: border-box;
    pointer-events: none;
    user-select: none;
}
.galleryCollage .item .description a {
    cursor: pointer;
    pointer-events: all;
}
@media (hover: hover) and (pointer: fine) {
    .galleryCollage:not(.dragging) .item:hover img {
        opacity: .2;
    }
}
.galleryCollage:not(.dragging) .item.active img {
    opacity: .2;
}

@media screen and (max-width: 1200px) {
    .galleryCollage {
        grid-template-columns: repeat( auto-fit, minmax(500px, 1fr) );
    }
}
@media screen and (max-width: 720px) {
    .galleryCollage {
        grid-template-columns: repeat( auto-fit, minmax(250px, 1fr) );
    }
}
@media screen and (max-width: 600px) {
    .galleryCollage {
        grid-template-columns: repeat( 1, 1fr);
    }
}

/* ************************ */
#revealIntersector {
    position: fixed;
    top: 30vh;
    left: 0;
    right: 0;
}
</style>
</head>
<body>
    {% include "components/header", classes: "fixed sticking", projects: false %}

    <div id="revealIntersector"></div>

    <section class="fullpage center dark">
        <div class="collage galleryCollage">
            {%- for i in (1..12) %}
                <div class="hiddenlink item">
                    {% image "imgPassthrough/bg_garage.jpg", "projectImage", "projectImage" %}
                    <div class="description">
                        <a class="hiddenlink" href="#" draggable="false"><h4>{{i}}.This watever. Very long text showing here, just make sure it fits. ></h4></a>
                        <span>2022-04-22</span>
                    </div>
                </div>
            {%- endfor %}
        </div>
    </section>
    
    <footer class="dark center">
        <p style="text-align: center;">Gonzalo Ruiz, independent software consultant and Lighting Designer.</p>
        <p><a href="/contact/">Let's have a chat!</a></p>
    </footer>

<script src="/js/scrollTools.js" type="text/javascript"></script>
<script src="/js/components/collage.js" type="text/javascript"></script>
<script src="/js/components/header.js" type="text/javascript"></script>
<script>
let lastDetectionTime = 0
const lastDetectionTimeout = 100 //ms, max delay allowed between detections in same row

window.addEventListener('load', () => {
    let documentLoadTime = 0

    detectScroll(document.querySelectorAll('.galleryCollage .item'), (e) => {
        const detectionTime = e.time
        if (!documentLoadTime) documentLoadTime = detectionTime // Ignore first event, as it's been fired on page load

        if ((detectionTime - documentLoadTime) > 100 && e.scrolled) {
            if ((detectionTime - lastDetectionTime) > lastDetectionTimeout) {
                removeOtherActive()
                lastDetectionTime = detectionTime
            }
            e.target.classList.add('active')
        }
    }, {
        threshold: [0.5],
        rootMargin: '-50% 0px 0% 0px' // Detect on center line
    })
})
/*
detectScroll(document.querySelectorAll('.galleryCollage .item'), (e) => {
    const elem = e.target

    console.log(elem)

    elem.classList.add('active')
}, {
    threshold: [1],
})
*/
</script>
</body>
</html>